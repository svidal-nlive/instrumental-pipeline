# version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    container_name: minio_storage
    restart: always
    env_file:
      - .env
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  # Dedicated migration service using the backend image
  migrations:
    build:
      context: ./backend
    container_name: backend_migrations
    env_file:
      - .env
    volumes:
      # Mount the versions folder from the host so that changes persist
      - ./backend/alembic/versions:/app/alembic/versions
    depends_on:
      - db
    # Wait for the database to be ready, then run the upgrade command.
    # After applying migrations, adjust permissions of the mounted folder.
    command: sh -c "sleep 10 && alembic upgrade head && chown -R ${PUID}:${PGID} /app/alembic/versions"
    restart: "no"

  backend:
    build:
      context: ./backend
    container_name: backend_service
    restart: always
    env_file:
      - .env
    volumes:
      # Mount the versions folder to ensure proper permissions and visibility of migration files
      - ./backend/alembic/versions:/app/alembic/versions
    ports:
      - "8000:8000"
    depends_on:
      - db
      - minio
      - redis
      - migrations

  spleeter:
    build:
      context: ./spleeter_service
    container_name: spleeter_service
    restart: always
    env_file:
      - .env
    ports:
      - "5001:5001"
    depends_on:
      - minio

  deemix:
    image: registry.gitlab.com/bockiii/deemix-docker
    restart: always
    volumes:
      - deemix_audio_files:/downloads
      - deemix_config:/config
    env_file:
      - .env
    environment:
      - UMASK_SET=022
      - ARL=1234567
      - TZ=America/New_York
      - PGID=${PGID}
      - PUID=${PUID}
    ports:
      - '6595:6595'
    container_name: deemix

  playlistdl:
    image: tanner23456/playlistdl:v2
    container_name: playlistdl
    user: "${PUID}:${PGID}"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 5000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    ports:
      - "5005:5000"
    env_file:
      - .env
    environment:
      ADMIN_USERNAME: access
      ADMIN_PASSWORD: Login@123
      AUDIO_DOWNLOAD_PATH: /pdl_audio_files
      CLEANUP_INTERVAL: 300
    volumes:
      - pdl_audio_files:/pdl_audio_files
    restart: on-failure:5

  file_watcher:
    build:
      context: ./file_watcher
    container_name: file_watcher
    restart: always
    volumes:
      - deemix_audio_files:/deemix_audio_files
      - pdl_audio_files:/pdl_audio_files
      - audio_files:/audio_files
    env_file:
      - .env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - backend
      - minio

  redis:
    image: redis:alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"

  doublecommander:
    container_name: doublecommander
    image: ghcr.io/linuxserver/doublecommander
    restart: always
    ports:
      - 3278:3000
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=America/New_York
    volumes:
      - doublecommander_config:/config
      - deemix_audio_files:/data/deemix_audio_files
      - pdl_audio_files:/data/pdl_audio_files
      - audio_files:/data/audio_files

volumes:
  postgres_data:
  minio_data:
  deemix_audio_files:
  pdl_audio_files:
  audio_files:
  deemix_config:
  doublecommander_config:
